const TelegramBot = require('node-telegram-bot-api');
const { token } = require('./config/config');

// –°–æ–∑–¥–∞–π—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true });

process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

let timeSlots = [];
const dayStart = 8;
const dayEnd = 21;

function getTimeSlots(year, month, date) {
    timeSlots = [];

    for (let i = dayStart; i < dayEnd; i++) {

        const today = new Date(year, month, date);
        today.setHours(i);
        today.setMinutes(0);
        today.setSeconds(0);
        timeSlots.push(today);
    }
    const today = new Date(year, month, date);
    today.setHours(dayEnd);
    today.setMinutes(0);
    today.setSeconds(0);
    timeSlots.push(today)

    return timeSlots;
}

function getDatesOfCurrentMonth() {
    const dates = [];

    const now = new Date();
    const year = now.getFullYear();
    const month = now.getMonth();

    // 0 - –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const daysInMonth = new Date(year, month + 1, 0).getDate();

    for (let day = now.getDate(); day <= daysInMonth; day++) {
        dates.push(new Date(year, month, day));
    }

    return dates;
}


let reservedTime = []

const routes = {
    'displayrooms': async (chatId, userId, selectedYear, selectedMonth, selectedDate) => {

        const jsonResponse = await getMeetingRooms();
        const buttons = jsonResponse.map(item => {
            return [{
                text: item.id + " " + item.description,
                callback_data: (`selFirstTime:${item.id}:${selectedYear}:${selectedMonth}:${selectedDate}`)
            }];
        });

        const options = {
            reply_markup: {
                inline_keyboard: buttons,
            },
        };

        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É', options);
    },
    'delbooking': async (chatId, userId, reservationId) => {

        const url = `http://127.0.0.1:8000/reservations/${reservationId}`;
        const access_token = await getAuthToken(userId);

        const response = await fetch(url,
            {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${access_token}`,
                    'Content-Type': 'application/json'
                }
            });

        if (response.ok) {
            bot.sendMessage(chatId, "–ë—Ä–æ–Ω—å —É–¥–∞–ª–µ–Ω–∞");

        } else {
            bot.sendMessage(chatId, "–ë—Ä–æ–Ω—å –Ω–µ —É–¥–∞–ª–µ–Ω–∞");
        }

    },
    'book': async (chatId, userId, roomId, fromReserveId, toReserveId) => {
        const access_token = await getAuthToken(userId);
        const reservation = await bookRoom(access_token, roomId, timeSlots[fromReserveId], timeSlots[toReserveId]);

        let message = "<–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ>:\n\n";
        message += `   üìç –ö–æ–º–Ω–∞—Ç–∞: ${reservation.meetingroom_id}\n`;
        message += `   üïí –°: ${formatDateTime(reservation.from_reserve)}\n`;
        message += `   üïí –ü–æ: ${formatDateTime(reservation.to_reserve)}\n`;
        // message += `   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${reservation.user_id}\n`;
        // message += `   üîñ ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${reservation.id}\n\n`;

        bot.sendMessage(chatId, message);
    },
    // –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    'selFirstTime': async (chatId, userId, roomId, selectedYear, selectedMonth, selectedDate) => {

        // get room schedule and select first date
        let reservations = await getReservationsByRoom(roomId);

        // –û—Å—Ç–∞–≤–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        reservations = reservations.filter((res) => {

            let check = new Date(res.from_reserve);

            return (
                selectedDate == check.getDate() &&
                selectedMonth == check.getMonth() &&
                selectedYear == check.getFullYear())
        });

        reservedTime = []

        reservations.forEach((reservation, index) => {

            const _left = new Date(reservation.from_reserve);
            const _right = new Date(reservation.to_reserve);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è
            if (isNaN(_left.getTime()) || isNaN(_right.getTime())) {
                console.error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞: ${reservation.from_reserve} - ${reservation.to_reserve}`);
                return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
            }

            reservedTime.push({ left: _left, right: _right });
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ (left)
        reservedTime.sort((a, b) => a.left - b.left);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timeSlots –≤ –∫–Ω–æ–ø–∫–∏
        // –ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã, –∞ –Ω–µ Date()
        const timeSlots = getTimeSlots(selectedYear, selectedMonth, selectedDate);
        const buttons = timeSlots.slice(0, -1).map((slot, index) => {

            let buttonText = `${slot.getHours()} - ${slot.getMinutes()} ‚úÖ`;
            let callbackData = `selSecondTime:${roomId}:${index}`;

            for (let i = 0; i < reservedTime.length; i++) {
                if (slot >= reservedTime[i].left && slot < reservedTime[i].right) {
                    // –°–ª–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                    buttonText = buttonText.replace('‚úÖ', '‚õî');
                    callbackData = 'disabled';
                    break;
                }
            }

            return {
                text: buttonText,
                callback_data: callbackData
            }
        });

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
        const groupedButtons = [];
        for (let i = 0; i < buttons.length; i += 4) {
            groupedButtons.push(buttons.slice(i, i + 4));
        }

        // –û–ø—Ü–∏–∏ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π –¥–ª—è Telegram
        const options = {
            reply_markup: {
                inline_keyboard: groupedButtons,
            },
        };

        bot.sendMessage(chatId, `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã ${roomId}

                                                                                                                                              
                                                                                                                                                                                                                              
                                                                                                                                                                                                                              
            \n ‚úÖ - –≤—Ä–µ–º—è —Å–≤–æ–±–æ–¥–Ω–æ\n‚õî - –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ                                                                                                                                                                                                                  
            \n –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:`, options);

    },
    // –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–Ω—Ü–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    'selSecondTime': async (chatId, userId, roomId, firstSlotId) => {

        const start_index = timeSlots.findIndex(el => el.getTime() > timeSlots[firstSlotId].getTime());
        const limitTime = reservedTime.findIndex(el => el.left.getTime() > timeSlots[firstSlotId].getTime());
        const end_index = limitTime === -1 ? timeSlots.length - 1 : timeSlots.findIndex(el => el.getTime() === reservedTime[limitTime].left.getTime());

        // –í–æ–∑–º–æ–∂–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        const possibleEnd = timeSlots.slice(start_index, end_index + 1);

        // –ö–Ω–æ–ø–∫–∏
        const buttons = possibleEnd.map((secondSlot, index) => {

            const buttonText = `${secondSlot.getHours()} - ${secondSlot.getMinutes()} ‚úÖ`;

            return {
                text: buttonText,
                callback_data: `book:${roomId}:${firstSlotId}:${timeSlots.findIndex(el => el.getTime() === secondSlot.getTime())}` // –î—Ä—É–≥–æ–π –∏–Ω–¥–µ–∫—Å
            }

        });

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
        const groupedButtons = [];
        for (let i = 0; i < buttons.length; i += 4) {
            groupedButtons.push(buttons.slice(i, i + 4));
        }

        // –û–ø—Ü–∏–∏ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π –¥–ª—è Telegram
        const options = {
            reply_markup: {
                inline_keyboard: groupedButtons,
            },
        };

        bot.sendMessage(chatId, `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã ${roomId}
                                                                              
                                                                                                                                                                               
                                                                                                                                                                                                                              
                                                                                                                                                                                                                              
                                                                    
                                                                                          
            \n –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:`, options);
    }
}

// Auth
async function getAuthToken(userId) {

    try {
        const formData = new URLSearchParams();
        formData.append('grant_type', 'password');
        formData.append('username', `${userId}@bot.tg`);
        formData.append('password', 'password');

        const response = await fetch('http://127.0.0.1:8000/auth/jwt/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: formData.toString()
        });

        if (response.ok) {
            const data = await response.json();
            return data.access_token;
        } else {
            console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', response);
            return null;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        return null;
    }
}

async function getReservationsByRoom(roomId) {

    const url = `http://127.0.0.1:8000/meeting_rooms/${roomId}/reservations`;

    const response = await fetch(url, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    });
    const jsonResponse = await response.json();

    return jsonResponse;
}

// –ó–∞–Ω—è—Ç—ã–µ –∫–æ–º–Ω–∞—Ç—ã
async function getReservations(access_token) {

    const response = await fetch('http://127.0.0.1:8000/reservations', {
        method: 'GET',
        headers: {
            'Authorization': `Bearer ${access_token}`,
            'Content-Type': 'application/json'
        }
    });

    const jsonResponse = await response.json();

    return jsonResponse;
}

// –ü–æ–ª—É—á–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserReservations(access_token) {

    const response = await fetch('http://127.0.0.1:8000/reservations/my_reservations', {
        method: 'GET',
        headers: {
            'Authorization': `Bearer ${access_token}`,
            'Content-Type': 'application/json'
        }
    });

    const jsonResponse = await response.json();

    return jsonResponse;
}

// 
async function getMeetingRooms(access_token) {

    const response = await fetch('http://127.0.0.1:8000/meeting_rooms', {
        method: 'GET',
        headers: {
            'Authorization': `Bearer ${access_token}`,
            'Content-Type': 'application/json'
        }
    });

    const jsonResponse = await response.json();

    return jsonResponse;
}

async function bookRoom(access_token, roomId, fromReserve, toReserve) {

    const fromFormated = `${fromReserve.getFullYear()}-${String(fromReserve.getMonth() + 1).padStart(2, '0')}-${String(fromReserve.getDate()).padStart(2, '0')}T${String(fromReserve.getHours()).padStart(2, '0')}:${String(fromReserve.getMinutes()).padStart(2, '0')}`;
    const minusMinute = new Date(toReserve);
    minusMinute.setMinutes(minusMinute.getMinutes() - 1);
    const toFormated = `${minusMinute.getFullYear()}-${String(minusMinute.getMonth() + 1).padStart(2, '0')}-${String(minusMinute.getDate()).padStart(2, '0')}T${String(minusMinute.getHours()).padStart(2, '0')}:${String(minusMinute.getMinutes()).padStart(2, '0')}`;
    const roomIdFormated = Number(roomId);

    const reqBody = {
        from_reserve: fromFormated,
        to_reserve: toFormated,
        meetingroom_id: roomIdFormated
    }

    try {
        const response = await fetch('http://127.0.0.1:8000/reservations/', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${access_token}`,
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(reqBody)
        });

        if (!response.ok) {
            const errorData = await response.json(); // –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—à–∏–±–∫–µ
            console.log(JSON.stringify(errorData));
            throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${errorData.message || response.statusText}`);
        }

        return await response.json();

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã:", error.message);
        throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    }
}

// async function deleteUser(userId) {

//     const url = `http://127.0.0.1:8000/delete${userId}`

//     try {
//         const response = await fetch(url, {
//             method: 'DELETE',
//             headers: {
//                 'Content-Type': 'application/json',
//             },
//         });

//         if (!response.ok) {
//             const errorData = await response.json(); // –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—à–∏–±–∫–µ
//             throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${errorData.message || response.statusText}`);
//         }
//         return await response.json();

//     } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error.message);
//         throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
//     }
// }

async function registerUser(userId) {
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    const reqBody = {
        email: `${userId}@bot.tg`,
        password: "password",
        is_active: true,
        is_superuser: false,
        is_verified: true,
        first_name: "string",
        birthdate: "2000-01-01"
    }

    const url = 'http://127.0.0.1:8000/auth/register/';

    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(reqBody)
        });

        if (!response.ok) {
            const errorData = await response.json(); // –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—à–∏–±–∫–µ
            throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${errorData.message || response.statusText}`);
        }

        return await response.json();

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error.message);
        throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
        const jsonResponse = await registerUser(userId);
    } catch (error) {
        bot.sendMessage(chatId, error.message);
    }
});


bot.onText(/\/reserve/, async msg => {

    // –í—ã–≤–µ—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–∞—Ç—ã
    const chatId = msg.chat.id;
    const dates = getDatesOfCurrentMonth();

    const buttons = dates.map((date) => {
        return {
            text: `${date.getDate()}`,
            callback_data: `displayrooms:${date.getFullYear()}:${String(date.getMonth()).padStart(2, '0')}:${String(date.getDate()).padStart(2, '0')}`
        };
    })

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    const groupedButtons = [];
    for (let i = 0; i < buttons.length; i += 4) {
        groupedButtons.push(buttons.slice(i, i + 4));
    }

    // –û–ø—Ü–∏–∏ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π –¥–ª—è Telegram
    const options = {
        reply_markup: {
            inline_keyboard: groupedButtons,
        },
    };

    bot.sendMessage(chatId, `
                                                                                                                                                  
                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                                                                                                                                                                                                                   
    \n –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:`, options);
});



// bot.onText(/\/displayrooms/, async msg => {

//     const chatId = msg.chat.id;
//     const jsonResponse = await getMeetingRooms();

//     const buttons = jsonResponse.map(item => {
//         return [{ text: item.id + " " + item.description, callback_data: ("selFirstTime:" + item.id) }];
//     });

//     const options = {
//         reply_markup: {
//             inline_keyboard: buttons,
//         },
//     };

//     await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É', options);
// });

// –ù–∞–∂–∞—Ç–∏–µ inline –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', (callbackQuery) => {

    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    const arr = data.split(':');
    const [route, ...rest] = arr;

    try {
        if (routes[route]) {
            routes[route](chatId, userId, ...rest);
        } else {
            bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
        }
    } catch (error) {
        bot.sendMessage(chatId, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫');
    }

    bot.answerCallbackQuery(callbackQuery.id);
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
function formatDateTime(dateTimeString) {
    const date = new Date(dateTimeString);
    const options = {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
    };
    return date.toLocaleString('ru-RU', options); // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
}

bot.onText(/\/reservations/, async (msg) => {

    const chatId = msg.chat.id;
    const userId = msg.from.id;

    const token = await getAuthToken(userId);
    const reservations = await getReservations(token);

    let message = "–°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:\n\n";
    reservations.forEach((reservation, index) => {
        message += `üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #${index + 1}\n`;
        message += `   üìç –ö–æ–º–Ω–∞—Ç–∞: ${reservation.meetingroom_id}\n`;
        message += `   üïí –°: ${formatDateTime(reservation.from_reserve)}\n`;
        message += `   üïí –ü–æ: ${formatDateTime(reservation.to_reserve)}\n`;
        // message += `   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${reservation.user_id}\n`;
        // message += `   üîñ ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${reservation.id}\n\n`;
    });

    await bot.sendMessage(chatId, message);
});

bot.onText(/\/mybookings/, async msg => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    const access_token = await getAuthToken(userId);

    try {
        const response = await getUserReservations(access_token);

        const today = new Date();
        const activeReservations = response.filter((res) => {

            const date = new Date(res.from_reserve);
            return date.getTime() > today.getTime();
        })

        if (activeReservations.length === 0) {
            return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.');
        }

        const buttons = activeReservations.map(res => {
            return [{
                text: `–ö–æ–º–Ω–∞—Ç–∞: ${res.meetingroom_id} —Å ${(res.from_reserve).slice(11,16)} –¥–æ ${(res.to_reserve).slice(11, 16)}`,
                callback_data: `delbooking:${res.id}`
            }];
        });

        const options = {
            reply_markup: {
                inline_keyboard: buttons,
            },
        };

        return bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å', options);

        // delbooking:

    } catch (error) {
        bot.sendMessage(chatId, error);
    }

});

// Error
bot.on("polling_error", err => console.log(err.data.error.message));


process.on('uncaughtException', (err) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
    // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥ –æ—à–∏–±–∫–∏
});


// Menu
const commands = [
    {
        command: "start",
        description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"
    },
    // {
    //     command: "displayrooms",
    //     description: "–°–ø–∏—Å–æ–∫ –∞—É–¥–∏—Ç–æ—Ä–∏–π"
    // },
    {
        command: "reserve",
        description: "–ù–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
    },
    {
        command: "mybookings",
        description: "–ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
    },
]

bot.setMyCommands(commands);
