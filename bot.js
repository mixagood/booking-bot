const TelegramBot = require('node-telegram-bot-api');

require('dotenv').config();

const { getAuthToken,  getReservationsByRoom, getUserReservations, 
    getReservations, getMeetingRooms, bookRoom, registerUser, deleteReservation} = require('./api/api')

const {getCachedDatesOfCurrentMonth, getCachedTimeslotsCurMonth, groupButtons} = require('./utils/utils')

const token = process.env.BOT_TOKEN;

// –°–æ–∑–¥–∞–π—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true });

process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

const userStates = {}; // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

async function initUserState(userId) {
    userStates[userId] = {
        prevState: '',
        roomId : undefined,
        selectedYear : undefined, 
        selectedMonth : undefined, 
        selectedDate : undefined,
        firstSlotId : undefined,
        secondSlotId : undefined
    }
}


let reservedTime = []

const routes = {
    'displayrooms': async (chatId, userId, selectedYear, selectedMonth, selectedDate) => {

        userStates[userId].selectedYear = selectedYear;
        userStates[userId].selectedMonth = selectedMonth;
        userStates[userId].selectedDate = selectedDate;

        console.log(userStates[userId])

        const jsonResponse = await getMeetingRooms();

        console.log(jsonResponse);

        const buttons = jsonResponse.map(item => {

            return {
                text: `${item.id} - ${item.description}`,
                callback_data: (`selFirstTime:${item.id}`)
            };
        });

        const options = groupButtons(buttons, 2);

        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É', options);
    },
    'delbooking': async (chatId, userId, reservationId) => {
        console.log(userStates[userId])

        const access_token = await getAuthToken(userId);
        const response = deleteReservation(chatId, reservationId, access_token);

        if (response.ok) {
            bot.sendMessage(chatId, "–ë—Ä–æ–Ω—å —É–¥–∞–ª–µ–Ω–∞");
    
        } else {
            bot.sendMessage(chatId, "–ë—Ä–æ–Ω—å –Ω–µ —É–¥–∞–ª–µ–Ω–∞");
        }

    },
    'book': async (chatId, userId, toReserveId) => {

        userStates[userId].secondSlotId = toReserveId;

        console.log(userStates[userId])

        const date = userStates[userId].selectedDate
        const roomId = userStates[userId].roomId
        const startId = userStates[userId].firstSlotId;
        const endId = userStates[userId].secondSlotId;

        const daySlots = getCachedTimeslotsCurMonth()[date];
        const fromReserve = daySlots[startId];
        const toReserve = daySlots[endId];

        const access_token = await getAuthToken(userId);

        console.log(daySlots)
        console.log(toReserve);
        console.log(fromReserve);

        const reservation = await bookRoom(access_token, roomId, fromReserve, toReserve);

        let message = "<–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ>:\n\n";
        message += `   üìç –ö–æ–º–Ω–∞—Ç–∞: ${reservation.meetingroom_id}\n`;
        message += `   üïí –°: ${formatDateTime(reservation.from_reserve)}\n`;
        message += `   üïí –ü–æ: ${formatDateTime(reservation.to_reserve)}\n`;

        bot.sendMessage(chatId, message);
    },

    // –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    'selFirstTime': async (chatId, userId, roomId) => {

        userStates[userId].roomId = roomId;

        console.log(userStates[userId])

        // get room schedule and select first date
        let reservations = await getReservationsByRoom(roomId);

        // –û—Å—Ç–∞–≤–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        reservations = reservations.filter((res) => {
            let check = new Date(res.from_reserve);
            return (
                userStates[userId].selectedDate == check.getDate() &&
                userStates[userId].selectedMonth == check.getMonth() &&
                userStates[userId].selectedYear == check.getFullYear())
        });

        reservedTime = [];

        reservations.forEach((reservation, index) => {

            const _left = new Date(reservation.from_reserve);
            const _right = new Date(reservation.to_reserve);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è
            if (isNaN(_left.getTime()) || isNaN(_right.getTime())) {
                console.error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞: ${reservation.from_reserve} - ${reservation.to_reserve}`);
                return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
            }

            reservedTime.push({ left: _left, right: _right });
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ (left)
        reservedTime.sort((a, b) => a.left - b.left);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timeSlots –≤ –∫–Ω–æ–ø–∫–∏
        // –ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã, –∞ –Ω–µ Date()

        // –ù–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–∞–¥–æ –∑–∞ –¥–µ–Ω—å
        // –ë–µ—Ä–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
        const timeSlots = getCachedTimeslotsCurMonth()[userStates[userId].selectedDate];

        const buttons = timeSlots.slice(0, -1).map((slot, index) => {

            let buttonText = `${slot.getHours()} - ${slot.getMinutes()} ‚úÖ`;
            let callbackData = `selSecondTime:${index}`;

            for (let i = 0; i < reservedTime.length; i++) {
                if ((slot >= reservedTime[i].left && slot < reservedTime[i].right) || 
            slot < Date.now()) {
                    // –°–ª–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                    buttonText = buttonText.replace('‚úÖ', '‚õî');
                    callbackData = 'disabled';
                    break;
                }
            }

            return {
                text: buttonText,
                callback_data: callbackData
            }
        });

        const options = groupButtons(buttons, 4);

        bot.sendMessage(chatId, `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã ${roomId}

                                                                                                                                              
                                                                                                                                                                                                                              
                                                                                                                                                                                                                              
            \n ‚úÖ - –≤—Ä–µ–º—è —Å–≤–æ–±–æ–¥–Ω–æ\n‚õî - –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ                                                                                                                                                                                                                  
            \n –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:`, options);

    },
    // –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–Ω—Ü–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    'selSecondTime': async (chatId, userId, firstSlotId) => {

        userStates[userId].firstSlotId = firstSlotId;

        console.log(userStates[userId]);

        const timeSlots = getCachedTimeslotsCurMonth()[userStates[userId].selectedDate];

        const start_index = timeSlots.findIndex(el => el.getTime() > timeSlots[firstSlotId].getTime());
        const limitTime = reservedTime.findIndex(el => el.left.getTime() > timeSlots[firstSlotId].getTime());
        const end_index = limitTime === -1 ? timeSlots.length - 1 : timeSlots.findIndex(el => el.getTime() === reservedTime[limitTime].left.getTime());

        // –í–æ–∑–º–æ–∂–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        const possibleEnd = timeSlots.slice(start_index, end_index + 1);

        // –ö–Ω–æ–ø–∫–∏
        const buttons = possibleEnd.map((secondSlot, index) => {
            const buttonText = `${secondSlot.getHours()} - ${secondSlot.getMinutes()} ‚úÖ`;
            return {
                text: buttonText,
                callback_data: `book:${timeSlots.findIndex(el => el.getTime() === secondSlot.getTime())}` // –î—Ä—É–≥–æ–π –∏–Ω–¥–µ–∫—Å
            }
        });

        const options = groupButtons(buttons, 4);

        bot.sendMessage(chatId, `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã ${userStates[userId].roomId}
                                                                              
                                                                                                                                                                               
                                                                                                                                                                                                                              
                                                                                                                                                                                                                              
                                                                    
                                                                                          
            \n –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:`, options);
    }
}


// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
        const jsonResponse = await registerUser(userId);
        console.log("–†–∞–±–æ—Ç–∞ —Å –±–æ—Ç–æ–º —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–∞");
    } catch (error) {
        bot.sendMessage(chatId, error.message);
    }
});

bot.onText(/\/reserve/, async msg => {

    // –í—ã–≤–µ—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–∞—Ç—ã
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    const dates = getCachedDatesOfCurrentMonth();

    initUserState(userId);
    console.log(userStates[userId]);

    const buttons = dates.map((date) => {
        return {
            text: `${date.getDate()}`,
            callback_data: `displayrooms:${date.getFullYear()}:${String(date.getMonth()).padStart(2, '0')}:${String(date.getDate()).padStart(2, '0')}`
        };
    })

    const options = groupButtons(buttons, 4);

    bot.sendMessage(chatId, `
                                                                                                                                                  
                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                                                                                                                                                                                                                   
    \n –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:`, options);
});

// –ù–∞–∂–∞—Ç–∏–µ inline –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', (callbackQuery) => {

    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;
    const messageId = callbackQuery.message.message_id;
    bot.deleteMessage(chatId, messageId);

    const arr = data.split(':');
    const [route, ...rest] = arr;

    

    try {
        if (routes[route]) {
            routes[route](chatId, userId, ...rest);
        } else {
            bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
        }
    } catch (error) {
        bot.sendMessage(chatId, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫');
    }

    bot.answerCallbackQuery(callbackQuery.id);
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
function formatDateTime(dateTimeString) {
    const date = new Date(dateTimeString);
    const options = {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
    };
    return date.toLocaleString('ru-RU', options); // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
}

bot.onText(/\/mybookings/, async msg => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    const access_token = await getAuthToken(userId);

    try {
        const response = await getUserReservations(access_token);

        console.log(response);

        const today = new Date();
        const activeReservations = response.filter((res) => {
            const date = new Date(res.from_reserve);
            return date.getTime() > today.getTime();
        })

        if (activeReservations.length === 0) {
            return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.');
        } else {

            const buttons = activeReservations.map(res => {
                return [{
                    text: `${res.meeting_room_name} —Å ${(res.from_reserve).slice(11,16)} –¥–æ ${(res.to_reserve).slice(11, 16)}`,
                    callback_data: `delbooking:${res.id}`
                }];
            });

            const options = {
                reply_markup: {
                    inline_keyboard: buttons,
                },
            };

            return bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å', options);
    }

    } catch (error) {
        bot.sendMessage(chatId, error);
    }

});

// Error
bot.on("polling_error", err => console.log(err.data.error.message));


process.on('uncaughtException', (err) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
    // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥ –æ—à–∏–±–∫–∏
});


// Menu
const commands = [
    {
        command: "start",
        description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"
    },
    {
        command: "reserve",
        description: "–ù–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
    },
    {
        command: "mybookings",
        description: "–ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
    },
]

bot.setMyCommands(commands);
